# Updated workflow file to use continuous_runner.py with storage monitoring
name: Simplified Video Generation Workflow

on:
  # Manual trigger with customizable parameters
  workflow_dispatch:
    inputs:
      duration:
        description: 'Duration to run in hours (0 for unlimited)'
        required: true
        default: '3.0'
      wait_minutes:
        description: 'Minutes to wait between video generations'
        required: true
        default: '2'
  
  # Run on schedule (once a day at 2 AM UTC)
  schedule:
    - cron: '0 2 * * *'

jobs:
  generate_videos:
    name: Generate Motivational Videos
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 hours exactly
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Create required directories
        run: |
          mkdir -p output/images
          mkdir -p output/scripts
          mkdir -p output/audio
          mkdir -p output/videos
          mkdir -p credentials
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # Google API packages
          pip uninstall -y google-generativeai || true
          pip install google-genai==0.1.0
          
          # Video generation packages
          pip install moviepy==1.0.3 decorator==4.4.2 imageio==2.9.0 imageio-ffmpeg==0.4.5
          pip install tqdm==4.64.1 numpy>=1.17.3 proglog==0.1.10
          
          # Audio generation
          pip install kokoro>=0.9.2
          
          # System dependencies
          sudo apt-get update
          sudo apt-get install -y ffmpeg libsndfile1 imagemagick espeak-ng
      
      - name: Display system and environment info
        run: |
          python --version
          pip list
          echo "Current directory:"
          ls -la
          echo "Source directory structure:"
          ls -la src/
          ls -la src/utils/
          ls -la src/generators/
      
      - name: Run continuous video generation with main.py
        run: |
          # Get the workflow parameters
          DURATION_HOURS=${{ github.event.inputs.duration || '3.0' }}
          WAIT_MINUTES=${{ github.event.inputs.wait_minutes || '2' }}
          
          # Convert wait minutes to seconds
          WAIT_SECONDS=$((WAIT_MINUTES * 60))
          
          # Create a wrapper script to run main.py in a loop
          echo "import sys, os, time, datetime, subprocess" > run_main_loop.py
          echo "print('Python version:', sys.version)" >> run_main_loop.py
          echo "print('Current directory:', os.getcwd())" >> run_main_loop.py
          echo "print('Starting continuous video generation using main.py')" >> run_main_loop.py
          echo "" >> run_main_loop.py
          echo "# Set the duration based on workflow input" >> run_main_loop.py
          echo "duration_hours = float('$DURATION_HOURS')" >> run_main_loop.py
          echo "wait_seconds = $WAIT_SECONDS" >> run_main_loop.py
          echo "print(f\"Will run for {duration_hours} hours with {wait_seconds} seconds between videos\")" >> run_main_loop.py
          echo "" >> run_main_loop.py
          echo "# Calculate end time if duration is not 0 (unlimited)" >> run_main_loop.py
          echo "end_time = None" >> run_main_loop.py
          echo "if duration_hours > 0:" >> run_main_loop.py
          echo "    end_time = time.time() + (duration_hours * 3600)" >> run_main_loop.py
          echo "" >> run_main_loop.py
          echo "start_time = datetime.datetime.now()" >> run_main_loop.py
          echo "video_count = 0" >> run_main_loop.py
          echo "" >> run_main_loop.py
          echo "try:" >> run_main_loop.py
          echo "    # Show initial disk space" >> run_main_loop.py
          echo "    print('Initial disk space:')" >> run_main_loop.py
          echo "    subprocess.run(['df', '-h', '.'])" >> run_main_loop.py
          echo "    print('')" >> run_main_loop.py
          echo "" >> run_main_loop.py
          echo "    # Function to check storage size and clean up if needed" >> run_main_loop.py
          echo "    def check_storage_and_cleanup():" >> run_main_loop.py
          echo "        # Calculate total size of output directories" >> run_main_loop.py
          echo "        import os" >> run_main_loop.py
          echo "        total_size_bytes = 0" >> run_main_loop.py
          echo "        file_sizes = {}" >> run_main_loop.py
          echo "        # Keep track of oldest files first for deletion" >> run_main_loop.py
          echo "        all_files = []" >> run_main_loop.py
          echo "" >> run_main_loop.py
          echo "        # Scan all output directories" >> run_main_loop.py
          echo "        for directory in ['output/images', 'output/scripts', 'output/audio', 'output/videos']:" >> run_main_loop.py
          echo "            if os.path.exists(directory):" >> run_main_loop.py
          echo "                for root, _, files in os.walk(directory):" >> run_main_loop.py
          echo "                    for file in files:" >> run_main_loop.py
          echo "                        file_path = os.path.join(root, file)" >> run_main_loop.py
          echo "                        try:" >> run_main_loop.py
          echo "                            size = os.path.getsize(file_path)" >> run_main_loop.py
          echo "                            mtime = os.path.getmtime(file_path)" >> run_main_loop.py
          echo "                            file_sizes[file_path] = size" >> run_main_loop.py
          echo "                            total_size_bytes += size" >> run_main_loop.py
          echo "                            all_files.append((file_path, mtime, size))" >> run_main_loop.py
          echo "                        except Exception as e:" >> run_main_loop.py
          echo "                            print(f'Error getting size of {file_path}: {e}')" >> run_main_loop.py
          echo "" >> run_main_loop.py
          echo "        # Convert to MB" >> run_main_loop.py
          echo "        total_size_mb = total_size_bytes / (1024 * 1024)" >> run_main_loop.py
          echo "        print(f'Total storage used: {total_size_mb:.2f} MB')" >> run_main_loop.py
          echo "" >> run_main_loop.py
          echo "        # Check if we're over the 200 MB limit" >> run_main_loop.py
          echo "        MB_LIMIT = 200" >> run_main_loop.py
          echo "        if total_size_mb > MB_LIMIT:" >> run_main_loop.py
          echo "            print(f'\nWARNING: Storage limit of {MB_LIMIT} MB exceeded! Current usage: {total_size_mb:.2f} MB')" >> run_main_loop.py
          echo "            print('Starting emergency cleanup to free space...')" >> run_main_loop.py
          echo "            " >> run_main_loop.py
          echo "            # Sort files by modification time (oldest first)" >> run_main_loop.py
          echo "            all_files.sort(key=lambda x: x[1])" >> run_main_loop.py
          echo "            " >> run_main_loop.py
          echo "            # Delete files until we're under the limit" >> run_main_loop.py
          echo "            bytes_to_remove = total_size_bytes - (MB_LIMIT * 0.9 * 1024 * 1024)  # Target 90% of limit" >> run_main_loop.py
          echo "            bytes_removed = 0" >> run_main_loop.py
          echo "            " >> run_main_loop.py
          echo "            for file_path, _, size in all_files:" >> run_main_loop.py
          echo "                if bytes_removed >= bytes_to_remove:" >> run_main_loop.py
          echo "                    break" >> run_main_loop.py
          echo "                " >> run_main_loop.py
          echo "                try:" >> run_main_loop.py
          echo "                    os.remove(file_path)" >> run_main_loop.py
          echo "                    bytes_removed += size" >> run_main_loop.py
          echo "                    print(f'Deleted {file_path} ({size / (1024 * 1024):.2f} MB)')" >> run_main_loop.py
          echo "                except Exception as e:" >> run_main_loop.py
          echo "                    print(f'Error deleting {file_path}: {e}')" >> run_main_loop.py
          echo "            " >> run_main_loop.py
          echo "            # Calculate new total after cleanup" >> run_main_loop.py
          echo "            new_total_mb = (total_size_bytes - bytes_removed) / (1024 * 1024)" >> run_main_loop.py
          echo "            print(f'Cleanup completed. New storage usage: {new_total_mb:.2f} MB')" >> run_main_loop.py
          echo "            " >> run_main_loop.py
          echo "        # Show current disk space" >> run_main_loop.py
          echo "        print('\nCurrent disk space:')" >> run_main_loop.py
          echo "        subprocess.run(['df', '-h', '.'])" >> run_main_loop.py
          echo "        print('')" >> run_main_loop.py
          echo "        return total_size_mb" >> run_main_loop.py
          echo "" >> run_main_loop.py
          echo "    # Function to cleanup files from a specific timestamp" >> run_main_loop.py
          echo "    def cleanup_files(timestamp):" >> run_main_loop.py
          echo "        print(f\"\nCleaning up files from timestamp {timestamp}...\")" >> run_main_loop.py
          echo "        pattern = f'*{timestamp}*'" >> run_main_loop.py
          echo "        # Try to find and delete all files with this timestamp" >> run_main_loop.py
          echo "        for directory in ['output/images', 'output/scripts', 'output/audio', 'output/videos']:" >> run_main_loop.py
          echo "            import glob" >> run_main_loop.py
          echo "            files = glob.glob(os.path.join(directory, pattern))" >> run_main_loop.py
          echo "            if files:" >> run_main_loop.py
          echo "                print(f'Removing {len(files)} files from {directory}')" >> run_main_loop.py
          echo "                for file in files:" >> run_main_loop.py
          echo "                    try:" >> run_main_loop.py
          echo "                        os.remove(file)" >> run_main_loop.py
          echo "                        print(f'Deleted {file}')" >> run_main_loop.py
          echo "                    except Exception as e:" >> run_main_loop.py
          echo "                        print(f'Error deleting {file}: {e}')" >> run_main_loop.py
          echo "        print('Cleanup completed.')" >> run_main_loop.py
          echo "        # Show current disk space" >> run_main_loop.py
          echo "        print('\nCurrent disk space after cleanup:')" >> run_main_loop.py
          echo "        subprocess.run(['df', '-h', '.'])" >> run_main_loop.py
          echo "        print('')" >> run_main_loop.py
          echo "" >> run_main_loop.py
          echo "    # Run in a loop until time limit is reached" >> run_main_loop.py
          echo "    while True:" >> run_main_loop.py
          echo "        video_count += 1" >> run_main_loop.py
          echo "        gen_start = datetime.datetime.now()" >> run_main_loop.py
          echo "        # Generate a timestamp for this video batch" >> run_main_loop.py
          echo "        current_timestamp = time.strftime('%Y%m%d_%H%M%S')" >> run_main_loop.py
          echo "        print(f\"\n{'='*80}\nStarting video generation #{video_count} at {gen_start.strftime('%Y-%m-%d %H:%M:%S')}\nTimestamp: {current_timestamp}\n{'='*80}\")" >> run_main_loop.py
          echo "" >> run_main_loop.py
          echo "        # Run main.py with auto mode enabled" >> run_main_loop.py
          echo "        cmd = ['python', 'main.py', '--auto']" >> run_main_loop.py
          echo "        result = subprocess.run(cmd)" >> run_main_loop.py
          echo "        # Check storage usage and enforce 200 MB limit" >> run_main_loop.py
          echo "        print('\nChecking storage usage after video generation...')" >> run_main_loop.py
          echo "        storage_mb = check_storage_and_cleanup()" >> run_main_loop.py
          echo "        print(f'Storage after automatic check: {storage_mb:.2f} MB')" >> run_main_loop.py
          echo "" >> run_main_loop.py
          echo "        # Clean up files from any previous generations (but not current)" >> run_main_loop.py
          echo "        if video_count > 1:" >> run_main_loop.py
          echo "            # Clean up files from previous run" >> run_main_loop.py
          echo "            print('\nCleaning up files from previous video generations...')" >> run_main_loop.py
          echo "            # Find any files that do not contain the current timestamp" >> run_main_loop.py
          echo "            for directory in ['output/videos', 'output/images', 'output/scripts', 'output/audio']:" >> run_main_loop.py
          echo "                import glob" >> run_main_loop.py
          echo "                files = glob.glob(os.path.join(directory, '*'))" >> run_main_loop.py
          echo "                for file in files:" >> run_main_loop.py
          echo "                    if current_timestamp not in file:" >> run_main_loop.py
          echo "                        try:" >> run_main_loop.py
          echo "                            os.remove(file)" >> run_main_loop.py
          echo "                            print(f'Deleted old file: {file}')" >> run_main_loop.py
          echo "                        except Exception as e:" >> run_main_loop.py
          echo "                            print(f'Error deleting {file}: {e}')" >> run_main_loop.py
          echo "" >> run_main_loop.py
          echo "        # Show current disk space after cleanup" >> run_main_loop.py
          echo "        print('\nCurrent disk space:')" >> run_main_loop.py
          echo "        subprocess.run(['df', '-h', '.'])" >> run_main_loop.py
          echo "" >> run_main_loop.py
          echo "        # Calculate and display duration" >> run_main_loop.py
          echo "        gen_end = datetime.datetime.now()" >> run_main_loop.py
          echo "        duration = (gen_end - gen_start).total_seconds()" >> run_main_loop.py
          echo "        print(f\"\nVideo #{video_count} completed in {duration:.1f} seconds\")" >> run_main_loop.py
          echo "" >> run_main_loop.py
          echo "        # Check if we should stop" >> run_main_loop.py
          echo "        if end_time and time.time() >= end_time:" >> run_main_loop.py
          echo "            print('Time limit reached, stopping video generation')" >> run_main_loop.py
          echo "            break" >> run_main_loop.py
          echo "" >> run_main_loop.py
          echo "        # Wait before starting next video" >> run_main_loop.py
          echo "        print(f\"Waiting {wait_seconds} seconds before starting next video...\")" >> run_main_loop.py
          echo "        time.sleep(wait_seconds)" >> run_main_loop.py
          echo "" >> run_main_loop.py
          echo "except KeyboardInterrupt:" >> run_main_loop.py
          echo "    print('\nReceived keyboard interrupt, stopping video generation')" >> run_main_loop.py
          echo "except Exception as e:" >> run_main_loop.py
          echo "    print(f\"\nError in video generation loop: {str(e)}\")" >> run_main_loop.py
          echo "finally:" >> run_main_loop.py
          echo "    # Calculate and display total runtime" >> run_main_loop.py
          echo "    end_time = datetime.datetime.now()" >> run_main_loop.py
          echo "    total_runtime = (end_time - start_time).total_seconds() / 3600  # in hours" >> run_main_loop.py
          echo "    print(f\"\n{'='*80}\nVideo generation complete!\nTotal videos created: {video_count}\nTotal runtime: {total_runtime:.2f} hours\n{'='*80}\")" >> run_main_loop.py
          
          # Run the wrapper script
          python run_main_loop.py
      
      - name: Summary
        if: always()
        run: |
          echo "Workflow completed. Check logs for details."
