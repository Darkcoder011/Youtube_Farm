name: Simplified Video Generation Workflow

on:
  # Manual trigger with customizable parameters
  workflow_dispatch:
    inputs:
      duration:
        description: 'Duration to run in hours (0 for unlimited)'
        required: true
        default: '3.0'
      wait_minutes:
        description: 'Minutes to wait between video generations'
        required: true
        default: '2'
  
  # Run on schedule (once a day at 2 AM UTC)
  schedule:
    - cron: '0 2 * * *'

jobs:
  generate_videos:
    name: Generate Motivational Videos
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 hours exactly
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Create required directories
        run: |
          mkdir -p output/images
          mkdir -p output/scripts
          mkdir -p output/audio
          mkdir -p output/videos
          mkdir -p credentials
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # Google API packages
          pip uninstall -y google-generativeai || true
          pip install google-genai==0.1.0
          
          # Video generation packages
          pip install moviepy==1.0.3 decorator==4.4.2 imageio==2.9.0 imageio-ffmpeg==0.4.5
          pip install tqdm==4.64.1 numpy>=1.17.3 proglog==0.1.10
          
          # Audio generation
          pip install kokoro>=0.9.2
          
          # System dependencies
          sudo apt-get update
          sudo apt-get install -y ffmpeg libsndfile1 imagemagick espeak-ng
      
      - name: Display system and environment info
        run: |
          python --version
          pip list
          echo "Current directory:"
          ls -la
          echo "Source directory structure:"
          ls -la src/
          ls -la src/utils/
          ls -la src/generators/
      
      - name: Run continuous video generation
        run: |
          # Get the workflow parameters
          DURATION_HOURS=${{ github.event.inputs.duration || '3.0' }}
          WAIT_MINUTES=${{ github.event.inputs.wait_minutes || '2' }}
          
          # Convert wait minutes to seconds for the continuous runner
          WAIT_SECONDS=$((WAIT_MINUTES * 60))
          
          # Create a wrapper script to run the continuous generator
          echo "import sys, os, time, subprocess, signal" > run_continuous.py
          echo "print('Python version:', sys.version)" >> run_continuous.py
          echo "print('Current directory:', os.getcwd())" >> run_continuous.py
          echo "print('Starting continuous video generation')" >> run_continuous.py
          echo "" >> run_continuous.py
          echo "# Set the duration based on workflow input" >> run_continuous.py
          echo "duration_hours = float('$DURATION_HOURS')" >> run_continuous.py
          echo "wait_seconds = $WAIT_SECONDS" >> run_continuous.py
          echo "" >> run_continuous.py
          echo "# Set the environment variable for delay between videos" >> run_continuous.py
          echo "os.environ['VIDEO_GEN_DELAY_SECONDS'] = str(wait_seconds)" >> run_continuous.py
          echo "" >> run_continuous.py
          echo "# Calculate end time if duration is not 0 (unlimited)" >> run_continuous.py
          echo "end_time = None" >> run_continuous.py
          echo "if duration_hours > 0:" >> run_continuous.py
          echo "    end_time = time.time() + (duration_hours * 3600)" >> run_continuous.py
          echo "    print(f'Will run for {duration_hours} hours')" >> run_continuous.py
          echo "else:" >> run_continuous.py
          echo "    print('Will run without time limit')" >> run_continuous.py
          echo "" >> run_continuous.py
          echo "# Set up the process" >> run_continuous.py
          echo "cmd = ['python', 'continuous_runner.py']" >> run_continuous.py
          echo "process = subprocess.Popen(cmd)" >> run_continuous.py
          echo "" >> run_continuous.py
          echo "try:" >> run_continuous.py
          echo "    # Wait until the process completes or time expires" >> run_continuous.py
          echo "    while process.poll() is None:" >> run_continuous.py
          echo "        time.sleep(5)  # Check every 5 seconds" >> run_continuous.py
          echo "        if end_time and time.time() > end_time:" >> run_continuous.py
          echo "            print('Time limit reached, sending terminate signal')" >> run_continuous.py
          echo "            # Send interrupt signal to let continuous_runner complete current video" >> run_continuous.py
          echo "            process.send_signal(signal.SIGINT)" >> run_continuous.py
          echo "            # Give it some time to finish gracefully" >> run_continuous.py
          echo "            for _ in range(12):  # 1 minute max wait" >> run_continuous.py
          echo "                if process.poll() is not None:" >> run_continuous.py
          echo "                    break" >> run_continuous.py
          echo "                time.sleep(5)" >> run_continuous.py
          echo "            # Force kill if still running" >> run_continuous.py
          echo "            if process.poll() is None:" >> run_continuous.py
          echo "                print('Process still running, terminating forcefully')" >> run_continuous.py
          echo "                process.terminate()" >> run_continuous.py
          echo "            break" >> run_continuous.py
          echo "    print('Continuous runner has finished')" >> run_continuous.py
          echo "except KeyboardInterrupt:" >> run_continuous.py
          echo "    print('Received keyboard interrupt, terminating process')" >> run_continuous.py
          echo "    process.send_signal(signal.SIGINT)" >> run_continuous.py
          echo "    # Give it some time to finish gracefully" >> run_continuous.py
          echo "    time.sleep(30)" >> run_continuous.py
          echo "finally:" >> run_continuous.py
          echo "    # Ensure process is terminated" >> run_continuous.py
          echo "    if process.poll() is None:" >> run_continuous.py
          echo "        process.terminate()" >> run_continuous.py
          echo "        print('Process terminated')" >> run_continuous.py
          
          # Run the wrapper script
          python run_continuous.py
      
      - name: Summary
        if: always()
        run: |
          echo "Workflow completed. Check logs for details."
